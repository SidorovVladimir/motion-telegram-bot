import { join } from 'path';
import { tmpdir } from 'os';
import fs from 'fs/promises';
import { isJPEG } from './utils/index.js';
import { InputFile } from 'grammy';
import {
  motionNotificationsEnabled,
  toggleNotifications,
  lastMotionTime,
} from './state.js';
import { captureFrame, captureVideoBuffer } from './camera.js';

export default (bot, rtspUrl) => {
  bot.command('start', async (ctx) => {
    toggleNotifications(true);
    await ctx.reply('‚úÖ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º –≤–∫–ª—é—á–µ–Ω–æ');
  });

  bot.command('stop', async (ctx) => {
    toggleNotifications(false);
    await ctx.reply('üõë –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  });

  bot.command('photo', async (ctx) => {
    console.log('üì∏ –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ /photo');

    let tempFile = null;

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
      tempFile = join(tmpdir(), `cam_${Date.now()}.jpg`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
      await captureFrame(rtspUrl, tempFile);

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const buffer = await fs.readFile(tempFile);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      if (!isJPEG(buffer)) {
        throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JPEG');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram Bot API
      await ctx.replyWithPhoto(new InputFile(buffer, 'snapshot.jpg'), {
        caption: `üì∏ –ö–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã\n‚è∞ ${new Date().toLocaleString()}`,
      });
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /photo:',
        error.message || error
      );
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (tempFile) {
        try {
          await fs.unlink(tempFile);
        } catch (err) {
          console.warn(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile}`,
            err
          );
        }
      }
    }
  });
  bot.command('status', async (ctx) => {
    const statusText = `
    üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
    üïí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏: ${motionNotificationsEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}
    ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: ${lastMotionTime}
    `;
    await ctx.reply(statusText.trim());
  });

  bot.command('record', async (ctx) => {
    await ctx.reply('üé• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å 10 —Å–µ–∫—É–Ω–¥...');

    try {
      const videoBuffer = await captureVideoBuffer(rtspUrl);
      await ctx.replyWithVideo(new InputFile(videoBuffer, 'motion.mp4'), {
        caption: `üé• –í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n‚è∞ ${new Date().toLocaleString()}`,
      });
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ:', err.message || err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ');
    }
  });
};
