import { join } from 'path';
import { tmpdir } from 'os';
import fs from 'fs/promises';
import { isJPEG } from './utils/index.js';
import { InputFile } from 'grammy';
import {
  motionNotificationsEnabled,
  toggleNotifications,
  lastMotionTime,
  motionCheckInterval,
  setMotionCheckInterval,
} from './state.js';
import { captureFrame, captureVideoBuffer } from './camera.js';
import { settingsMenu, backKeyboard, motionMenu } from './keyboards/index.js';

export default (bot, rtspUrl) => {
  bot.command('start', async (ctx) => {
    const userId = ctx.from.id;
    toggleNotifications(true, userId);
    await ctx.reply(
      '‚úÖ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'
    );
  });

  bot.command('stop', async (ctx) => {
    toggleNotifications(false);
    await ctx.reply(
      'üõë –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'
    );
  });

  bot.command('photo', async (ctx) => {
    console.log('üì∏ –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä –ø–æ –∫–æ–º–∞–Ω–¥–µ /photo');

    let tempFile = null;

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
      tempFile = join(tmpdir(), `cam_${Date.now()}.jpg`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
      await captureFrame(rtspUrl, tempFile);

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const buffer = await fs.readFile(tempFile);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      if (!isJPEG(buffer)) {
        throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JPEG');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram Bot API
      await ctx.replyWithPhoto(new InputFile(buffer, 'snapshot.jpg'), {
        caption: `üì∏ –ö–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã\n‚è∞ ${new Date().toLocaleString()}`,
      });
    } catch (error) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /photo:',
        error.message || error
      );
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (tempFile) {
        try {
          await fs.unlink(tempFile);
        } catch (err) {
          console.warn(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFile}`,
            err
          );
        }
      }
    }
  });
  bot.command('status', async (ctx) => {
    const statusText = `
    üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
    üïí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏: ${motionNotificationsEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}
    ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: ${lastMotionTime}
    ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è: ${motionCheckInterval / 1000} —Å–µ–∫. 
    `;
    await ctx.reply(statusText.trim());
  });

  bot.command('record', async (ctx) => {
    await ctx.reply('üé• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å 10 —Å–µ–∫—É–Ω–¥...');

    try {
      const videoBuffer = await captureVideoBuffer(rtspUrl);
      await ctx.replyWithVideo(new InputFile(videoBuffer, 'motion.mp4'), {
        caption: `üé• –í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n‚è∞ ${new Date().toLocaleString()}`,
      });
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ:', err.message || err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ');
    }
  });

  bot.command('settings', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
      reply_markup: settingsMenu,
    });
  });

  bot.callbackQuery('check_motion', async (ctx) => {
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', {
      reply_markup: motionMenu,
    });
    await ctx.answerCallbackQuery();
  });

  bot.on('callback_query:data', async (ctx) => {
    setMotionCheckInterval(ctx.callbackQuery.data);
    await ctx.reply(
      `–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ ${
        ctx.callbackQuery.data / 1000
      } —Å–µ–∫.`
    );
    await ctx.answerCallbackQuery();
  });

  bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', e.description);
    } else if (e instanceof HttpError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:', e);
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
    }
  });
};
