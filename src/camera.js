import { spawn } from 'child_process';
import ffmpeg from 'fluent-ffmpeg';
import { InputFile } from 'grammy';
import { isJPEG } from './utils/index.js';
import { userId } from './state.js';

export const captureFrameBuffer = async (rtspUrl) => {
  return new Promise((resolve, reject) => {
    const ffmpegProcess = spawn('ffmpeg', [
      '-hide_banner',
      '-loglevel',
      'error',
      '-use_wallclock_as_timestamps',
      '1',
      '-rtsp_transport',
      'tcp',
      '-i',
      rtspUrl,
      '-vframes',
      '1', // —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–¥—Ä
      '-f',
      'image2', // —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      '-c:v',
      'mjpeg', // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MJPEG
      '-q:v',
      '2', // –∫–∞—á–µ—Å—Ç–≤–æ (–Ω–∏–∑–∫–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)
      '-vf',
      'scale=640:-1', // —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
      '-pix_fmt',
      'yuvj420p', // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram
      '-',
    ]);

    let bufferChunks = [];
    let stderrData = '';

    ffmpegProcess.stdout.on('data', (chunk) => {
      bufferChunks.push(chunk);
    });

    ffmpegProcess.stderr.on('data', (data) => {
      stderrData += data.toString();
    });

    ffmpegProcess.on('close', async (code) => {
      if (code !== 0) {
        console.error(`‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
        console.error('STDERR:', stderrData);
        return reject(new Error(`FFmpeg failed with code ${code}`));
      }

      const imageBuffer = Buffer.concat(bufferChunks);

      if (!isJPEG(imageBuffer)) {
        return reject(new Error('‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º JPEG'));
      }

      resolve(imageBuffer);
    });

    ffmpegProcess.on('error', (err) => {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg:', err.message);
      reject(err);
    });
  });
};

export const captureVideoBuffer = async (rtspUrl) => {
  return new Promise((resolve, reject) => {
    const chunks = [];
    const ffmpegProcess = spawn('ffmpeg', [
      '-rtsp_transport',
      'tcp',
      '-i',
      rtspUrl,
      '-t',
      '10', // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
      '-c:v',
      'libx264', // –∫–æ–¥–µ–∫ –≤–∏–¥–µ–æ
      '-preset',
      'ultrafast', // —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
      '-tune',
      'zerolatency', // –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
      '-pix_fmt',
      'yuv420p', // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram
      '-c:a',
      'aac', // –∞—É–¥–∏–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–æ)
      '-f',
      'mp4', // —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
      '-movflags',
      '+frag_keyframe+empty_moov', // –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
      '-vf',
      'scale=640:trunc(ow/a/2)*2', // —Ñ–∏–∫—Å –¥–ª—è —á–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
      'pipe:1',
    ]);

    let stderr = '';

    ffmpegProcess.stderr.on('data', (data) => {
      stderr += data.toString();
    });

    ffmpegProcess.stdout.on('data', (chunk) => {
      chunks.push(chunk);
    });

    ffmpegProcess.on('close', (code) => {
      if (code !== 0) {
        console.error(`‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
        console.error('STDERR:', stderr);
        return reject(new Error('–û—à–∏–±–∫–∞ FFmpeg'));
      }

      const videoBuffer = Buffer.concat(chunks);
      resolve(videoBuffer);
    });

    ffmpegProcess.on('error', (err) => {
      reject(err);
    });
  });
};

export const captureFrame = async (rtspUrl, tempFile) => {
  return new Promise((resolve, reject) => {
    const ffmpegProcess = ffmpeg(rtspUrl)
      .inputOptions([
        '-rtsp_transport tcp',
        '-timeout 5000000', // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        '-analyzeduration 10000000',
        '-probesize 10000000',
      ])
      .outputOptions([
        '-vframes 1',
        '-q:v 2',
        '-f image2',
        '-c:v mjpeg',
        '-pix_fmt yuvj420p',
      ])
      .on('start', (cmd) => console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞:', cmd))
      .on('end', resolve)
      .on('error', (err, stdout, stderr) => {
        console.error('FFmpeg error:', err);
        console.error('FFmpeg stdout:', stdout);
        console.error('FFmpeg stderr:', stderr);
        reject(err);
      })
      .save(tempFile);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ FFmpeg
    setTimeout(() => {
      if (!ffmpegProcess.ended && !ffmpegProcess.killed) {
        ffmpegProcess.kill();
        reject(new Error('–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è FFmpeg'));
      }
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥
  });
};

export const broadcastMotionVideo = async (bot, videoBuffer, caption) => {
  try {
    await bot.api.sendVideo(userId, new InputFile(videoBuffer, 'motion.mp4'), {
      caption,
      filename: 'motion.mp4',
      contentType: 'video/mp4',
    });

    console.log(`‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (err) {
    console.error(
      `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
      err.message
    );
  }
};

export const broadcastMotionAlert = async (bot, imageBuffer, caption) => {
  try {
    await bot.api.sendDocument(
      userId,
      new InputFile(imageBuffer, 'motion.jpg'),
      {
        caption,
      }
    );
    console.log(`‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (err) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
      err.message
    );
  }
};
