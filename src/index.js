import 'dotenv/config';
import { Bot } from 'grammy';
import cvReadyPromise from '@techstark/opencv-js';
import { createCanvas, loadImage } from 'canvas';
import setupBot from './bot.js';
import { handleMotionDetected } from './motion.js';
import { captureFrameBuffer } from './camera.js';

// === –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è (–≤ –º—Å) ===
const motionCheckInterval = 5000;

// === –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è ===
let prevGray = null;

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const token = process.env.BOT_TOKEN;

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
export const userId = +process.env.USER_ID;

// === –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–ª rtsp –∫–∞–º–µ—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const rtspUrl = process.env.RTSP_URL;

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ ===
const bot = new Bot(token);

console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenCV ===
const cv = await cvReadyPromise;
console.log('‚úÖ OpenCV –∑–∞–≥—Ä—É–∂–µ–Ω!');

// === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
bot.api.setMyCommands([
  { command: 'start', description: '–í–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–∂–µ–Ω–∏–µ' },
  { command: 'stop', description: '–û—Ç–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–∂–µ–Ω–∏–µ' },
  { command: 'photo', description: 'C–Ω–∏–º–æ–∫ –∫–∞–º–µ—Ä—ã' },
  { command: 'record', description: '–ó–∞–ø–∏—Å—å (10 —Å–µ–∫)' },
  { command: 'status', description: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' },
]);

// === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è ===
async function detectMotion(base64Image) {
  const img = await loadImage(base64Image);
  const canvas = createCanvas(img.width, img.height);
  const ctx = canvas.getContext('2d');
  ctx.drawImage(img, 0, 0);
  const imageData = ctx.getImageData(0, 0, img.width, img.height);

  const src = cv.matFromArray(
    img.height,
    img.width,
    cv.CV_8UC4,
    imageData.data
  );
  const gray = new cv.Mat();
  cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY);

  if (!prevGray) {
    prevGray = gray.clone();
    return false;
  }

  const diff = new cv.Mat();
  cv.absdiff(prevGray, gray, diff);

  const thresh = new cv.Mat();
  cv.threshold(diff, thresh, 25, 255, cv.THRESH_BINARY);

  const contours = new cv.MatVector();
  const hierarchy = new cv.Mat();
  cv.findContours(
    thresh,
    contours,
    hierarchy,
    cv.RETR_CCOMP,
    cv.CHAIN_APPROX_SIMPLE
  );

  let motionDetected = false;
  for (let i = 0; i < contours.size(); ++i) {
    const cnt = contours.get(i);
    const area = cv.contourArea(cnt);
    if (area > 500) {
      motionDetected = true;
      break;
    }
  }

  prevGray = gray.clone();
  return motionDetected;
}

// === –§—É–Ω–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è ===
function startMotionDetection(rtspUrl, bot) {
  setInterval(async () => {
    console.log('üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ...');
    try {
      const buffer = await captureFrameBuffer(rtspUrl);
      const base64Image = `data:image/jpeg;base64,${buffer.toString('base64')}`;
      const motion = await detectMotion(base64Image);

      if (motion) {
        await handleMotionDetected(bot, rtspUrl);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è:', err.message || err);
    }
  }, motionCheckInterval);
}

setupBot(bot, rtspUrl);

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.start();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// === –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
startMotionDetection(rtspUrl, bot);
